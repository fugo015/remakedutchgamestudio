webpackHotUpdate("dutchgamestudio",{

/***/ "./packages/mars-theme/src/components/index.js":
/*!*****************************************************!*\
  !*** ./packages/mars-theme/src/components/index.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var _header__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./header */ \"./packages/mars-theme/src/components/header.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _post__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./post */ \"./packages/mars-theme/src/components/post.js\");\n/* harmony import */ var _loading__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loading */ \"./packages/mars-theme/src/components/loading.js\");\n/* harmony import */ var _title__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./title */ \"./packages/mars-theme/src/components/title.js\");\n/* harmony import */ var _page_error__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./page-error */ \"./packages/mars-theme/src/components/page-error.js\");\n/* harmony import */ var _images_start_image_gif__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../images/start_image.gif */ \"./packages/mars-theme/src/images/start_image.gif\");\n/* harmony import */ var _images_game_vr_jpg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../images/game-vr.jpg */ \"./packages/mars-theme/src/images/game-vr.jpg\");\n/* harmony import */ var _images_engagement_game_jpg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../images/engagement-game.jpg */ \"./packages/mars-theme/src/images/engagement-game.jpg\");\n/* harmony import */ var _images_entertaiment_game_jpg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../images/entertaiment-game.jpg */ \"./packages/mars-theme/src/images/entertaiment-game.jpg\");\n/* harmony import */ var _images_serious_game_jpg__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../images/serious-game.jpg */ \"./packages/mars-theme/src/images/serious-game.jpg\");\n!(function webpackMissingModule() { var e = new Error(\"Cannot find module '../images/intresse.jpg'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * Theme is the root React component of our theme. The one we will export\n * in roots.\n */const Theme=({state})=>{// Get information about the current URL.\nconst data=state.source.get(state.router.link);return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(_title__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(frontity__WEBPACK_IMPORTED_MODULE_2__[\"Head\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(\"meta\",{name:\"description\",content:state.frontity.description}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(\"html\",{lang:\"en\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(\"link\",{rel:\"stylesheet\",href:\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\",integrity:\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\",crossorigin:\"anonymous\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(frontity__WEBPACK_IMPORTED_MODULE_2__[\"Global\"],{styles:globalStyles}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(HeadContainer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(_header__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(StartImage,{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(Box,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(BoxContent,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(BoxTitel,{children:\"Game laten ontwikkelen\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(BoxText,{children:\"Wij bij Dutch Game Studio zijn gespecialiseerd in het ontwikkelen van games. Bekijk hieronder de mogelijkheden.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ScrollButton,{href:\"#scroll\"})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(FluidContainer,{id:\"scroll\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(Row,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrImage,{className:\"col-md-6 push-md-6 home__content_block home__block-right home__block-bg\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(VrTextColom,{className:\"col-md-6 pull-md-6 home__content_block home__content_block-content home__content_block-content-right-align\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrTitle,{children:\"VR | AR | SIMULATIE GAME\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Bij een VR game waan je je in een andere virtuele wereld. Een AR game is niet volledig virtueel maar zijn er virtuele elementen die je toe kan voegen aan de bestaande wereld.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Door gebruik te maken van een Virtual Reality bril, lijkt het alsof je je in het spel bevindt. Augmented Reality is te gebruiken doormiddel van bijvoorbeeld je smartphone of een speciale AR-bril zoals de Hololens. Daarnaast ontwikkelen wij ook 3D simulatiegames. Simulatiegames worden met name gebuikt om praktijksituaties te oefenen, bijvoorbeeld in de medische wereld en bij Defensie.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonGroen,{children:\"Contact opnemen\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonWit,{children:\"Offerte aanvragen\"})]})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(FluidContainer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(Row,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(EngagementImage,{className:\"col-md-6 push-md-6 home__content_block home__block-right home__block-bg\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(VrTextColom,{className:\"col-md-6 pull-md-6 home__content_block home__content_block-content home__content_block-content-right-align\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrTitle,{children:\"ENGAGEMENT GAME\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Een engagement game is erop gericht om uw merk/product onder de aandacht te brengen.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Uw geeft hiermee uw klant de ultieme Merkbeleving. Laat door middel van een game een blijvende indruk achter bij uw klanten en zorg dat zij uw merk niet meer vergeten.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonGroen,{children:\"Contact opnemen\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonWit,{children:\"Offerte aanvragen\"})]})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(FluidContainer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(Row,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(EntertainmentImage,{className:\"col-md-6 push-md-6 home__content_block home__block-right home__block-bg\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(VrTextColom,{className:\"col-md-6 pull-md-6 home__content_block home__content_block-content home__content_block-content-right-align\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrTitle,{children:\"ENTERTAINMENT GAME\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Een Entertainment Game heeft als primair uitgangspunt plezier/spelen (Denk aan Candy Crush, Angry Birds etc.)\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Entertainment games zijn te spelen op verschillende platformen zoals via consoles, IPhone, Ipad en Android.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonGroen,{children:\"Contact opnemen\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonWit,{children:\"Offerte aanvragen\"})]})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(FluidContainer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(Row,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(SeriousImage,{className:\"col-md-6 push-md-6 home__content_block home__block-right home__block-bg\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(VrTextColom,{className:\"col-md-6 pull-md-6 home__content_block home__content_block-content home__content_block-content-right-align\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrTitle,{children:\"SERIOUS | APPLIED GAME\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Een serious game ook wel E-learning game is een spel met een ander primair doel dan puur vermaak.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(VrText,{children:\"Applied games zijn steeds meer in opkomst en worden door bedrijven en instellingen gebruikt om trainingen en leren leuker te maken.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonGroen,{children:\"Contact opnemen\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonWit,{children:\"Offerte aanvragen\"})]})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(Footer,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsxs\"])(Interesse,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(InteresseTitel,{children:\"Interesse?\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(InteresseText,{children:\"Neem contact op voor de mogelijkheden.\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__[\"jsx\"])(ButtonGroen,{children:\"Contact opnemen\"})]})})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Theme));const globalStyles= false?undefined:{name:\"1q7ziw2-globalStyles\",styles:\"body{margin:0;font-family:-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,\\\"Droid Sans\\\",\\\"Helvetica Neue\\\",Helvetica,Arial,sans-serif;}a,a:visited{color:inherit;text-decoration:none;};label:globalStyles;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const HeadContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd623\",label:\"HeadContainer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Box=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd622\",label:\"Box\"})( false?undefined:{name:\"c0j8f9\",styles:\"position:absolute;bottom:0;content:\\\" \\\";left:0;right:0;z-index:1\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BoxContent=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd621\",label:\"BoxContent\"})( false?undefined:{name:\"yn3n70\",styles:\"background:#fff;padding:25px;border-top:5px solid #f1f1f1;text-align:center;margin:0 auto;max-width:600px;animation:card .5s\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BoxTitel=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"h1\",{target:\"e1nzqhd620\",label:\"BoxTitel\"})( false?undefined:{name:\"o7hcj5\",styles:\"letter-spacing:.12em;font-size:20px;font-weight:600;padding-bottom:15px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const BoxText=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"p\",{target:\"e1nzqhd619\",label:\"BoxText\"})( false?undefined:{name:\"1tt969q\",styles:\"color:#0f0e11;line-height:2em;font-size:16px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ScrollButton=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"a\",{target:\"e1nzqhd618\",label:\"ScrollButton\"})( false?undefined:{name:\"1q7yn1b\",styles:\"text-align:center;position:relative;padding:7.5px;animation:scaling 1s infinite alternate;-webkit-animation:scaling 1s infinite alternate;transition:all .1s ease-in-out;line-height:0;margin:0 auto;background:#27ae60;display:inline-block;border-radius:3px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const FluidContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd617\",label:\"FluidContainer\"})( false?undefined:{name:\"qhxz92\",styles:\"max-width:100%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Row=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd616\",label:\"Row\"})( false?undefined:{name:\"19tgm8w\",styles:\"display:flex;flex-wrap:wrap;margin-right:-15px;margin-left:-15px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StartImage=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd615\",label:\"StartImage\"})(\"background:url(\",_images_start_image_gif__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\");background-size:cover;position:relative;height:100vh;overflow:hidden;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));{/*vr*/}const VrImage=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd614\",label:\"VrImage\"})(\"background:url(\",_images_game_vr_jpg__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\") no-repeat;background-size:cover;background-position:center;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const VrTextColom=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd613\",label:\"VrTextColom\"})( false?undefined:{name:\"16d87q0\",styles:\"padding:100px 50px;min-height:500px;background:#f5f6f6\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const VrText=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"p\",{target:\"e1nzqhd612\",label:\"VrText\"})( false?undefined:{name:\"1ie3s9b\",styles:\"color:#0f0e11;line-height:1.5em;font-size:17px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const VrTitle=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"h2\",{target:\"e1nzqhd611\",label:\"VrTitle\"})( false?undefined:{name:\"1ij41de\",styles:\"letter-spacing:.12em;font-weight:600;text-transform:uppercase;color:#0f0e11;padding-bottom:15px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});{/*engagement game */}const EngagementImage=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd610\",label:\"EngagementImage\"})(\"background:url(\",_images_engagement_game_jpg__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\") no-repeat;background-size:cover;background-position:center;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));{/*entertainment game */}const EntertainmentImage=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd69\",label:\"EntertainmentImage\"})(\"background:url(\",_images_entertaiment_game_jpg__WEBPACK_IMPORTED_MODULE_13__[\"default\"],\") no-repeat;background-size:cover;background-position:center;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));{/*serious game */}const SeriousImage=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd68\",label:\"SeriousImage\"})(\"background:url(\",_images_serious_game_jpg__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\") no-repeat;background-size:cover;background-position:center;\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const ButtonGroen=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"a\",{target:\"e1nzqhd67\",label:\"ButtonGroen\"})( false?undefined:{name:\"1a240va\",styles:\"border:0;background:#27ae60;padding:10px 20px;display:inline-block;cursor:pointer;font-weight:600;letter-spacing:.12em;border-radius:3px;font-size:14px;text-align:center;transition:all .1s ease-in-out;color:#FFFFFF;margin:20px 0;margin-bottom:5px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const ButtonWit=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"a\",{target:\"e1nzqhd66\",label:\"ButtonWit\"})( false?undefined:{name:\"kesluo\",styles:\"border:0;background:#fff;padding:10px 20px;display:inline-block;cursor:pointer;font-weight:600;letter-spacing:.12em;border-radius:3px;font-size:14px;text-align:center;transition:all .1s ease-in-out;color:#252525;margin:20px 0;margin-bottom:5px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});{/*footer */}const Footer=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd65\",label:\"Footer\"})( false?undefined:{name:\"oqfj6n\",styles:\"width:100%;margin:0;padding:0;box-sizing:inherit\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Interesse=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd64\",label:\"Interesse\"})( false?undefined:{name:\"1dfhyzp\",styles:\"padding:50px 25px;text-align:center;margin:20px;display:block\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcR2VicnVpa2VyXFxEb2N1bWVudHNcXHNjaG9vbC1zdGFnZVxcZHV0Y2hnYW1lc3R1ZGlvXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrVDRCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcR2VicnVpa2VyXFxEb2N1bWVudHNcXHNjaG9vbC1zdGFnZVxcZHV0Y2hnYW1lc3R1ZGlvXFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdsb2JhbCwgY3NzLCBjb25uZWN0LCBzdHlsZWQsIEhlYWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcbmltcG9ydCBTd2l0Y2ggZnJvbSBcIkBmcm9udGl0eS9jb21wb25lbnRzL3N3aXRjaFwiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi9oZWFkZXJcIjtcbmltcG9ydCBMaXN0IGZyb20gXCIuL2xpc3RcIjtcbmltcG9ydCBQb3N0IGZyb20gXCIuL3Bvc3RcIjtcbmltcG9ydCBMb2FkaW5nIGZyb20gXCIuL2xvYWRpbmdcIjtcbmltcG9ydCBUaXRsZSBmcm9tIFwiLi90aXRsZVwiO1xuaW1wb3J0IFBhZ2VFcnJvciBmcm9tIFwiLi9wYWdlLWVycm9yXCI7XG5pbXBvcnQgc3RhcnRfaW1hZ2UgZnJvbSBcIi4uL2ltYWdlcy9zdGFydF9pbWFnZS5naWZcIjtcbmltcG9ydCB2cl9pbWFnZSBmcm9tXCIuLi9pbWFnZXMvZ2FtZS12ci5qcGdcIjtcbmltcG9ydCBlbmdhZ2VtZW50X2ltYWdlIGZyb20gXCIuLi9pbWFnZXMvZW5nYWdlbWVudC1nYW1lLmpwZ1wiO1xuaW1wb3J0IGVuZXJ0YWlubWVudF9pbWFnZSBmcm9tIFwiLi4vaW1hZ2VzL2VudGVydGFpbWVudC1nYW1lLmpwZ1wiO1xuaW1wb3J0IHNlcmlvdXNfaW1hZ2UgZnJvbSBcIi4uL2ltYWdlcy9zZXJpb3VzLWdhbWUuanBnXCI7XG5pbXBvcnQgaW50ZXJlc3NlX2ltYWdlIGZyb20gXCIuLi9pbWFnZXMvaW50cmVzc2UuanBnXCI7XG4vKipcbiAqIFRoZW1lIGlzIHRoZSByb290IFJlYWN0IGNvbXBvbmVudCBvZiBvdXIgdGhlbWUuIFRoZSBvbmUgd2Ugd2lsbCBleHBvcnRcbiAqIGluIHJvb3RzLlxuICovXG5jb25zdCBUaGVtZSA9ICh7IHN0YXRlIH0pID0+IHtcbiAgLy8gR2V0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IFVSTC5cbiAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHsvKiBBZGQgc29tZSBtZXRhdGFncyB0byB0aGUgPGhlYWQ+IG9mIHRoZSBIVE1MLiAqL31cbiAgICAgIDxUaXRsZSAvPlxuICAgICAgPEhlYWQ+XG4gICAgICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9e3N0YXRlLmZyb250aXR5LmRlc2NyaXB0aW9ufSAvPlxuICAgICAgICA8aHRtbCBsYW5nPVwiZW5cIiAvPlxuICAgICAgICA8bGlua1xuICAgICAgICAgICAgcmVsPVwic3R5bGVzaGVldFwiXG4gICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvNC41LjAvY3NzL2Jvb3RzdHJhcC5taW4uY3NzXCJcbiAgICAgICAgICAgIGludGVncml0eT1cInNoYTM4NC05YUl0Mm5ScEMxMlVrOWdTOWJhRGw0MTFOUUFwRm1DMjZFd0FPSDhXZ1psNU1ZWXhGZmMrTmNQYjFkS0dqN1NrXCJcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luPVwiYW5vbnltb3VzXCJcbiAgICAgICAgLz5cbiAgICAgIDwvSGVhZD5cblxuICAgICAgey8qIEFkZCBzb21lIGdsb2JhbCBzdHlsZXMgZm9yIHRoZSB3aG9sZSBzaXRlLCBsaWtlIGJvZHkgb3IgYSdzLiBcbiAgICAgIE5vdCBjbGFzc2VzIGhlcmUgYmVjYXVzZSB3ZSB1c2UgQ1NTLWluLUpTLiBPbmx5IGdsb2JhbCBIVE1MIHRhZ3MuICovfVxuICAgICAgPEdsb2JhbCBzdHlsZXM9e2dsb2JhbFN0eWxlc30gLz5cblxuICAgICAgey8qIG5hdmJhci4gKi99XG4gICAgICA8SGVhZENvbnRhaW5lcj5cbiAgICAgICAgPEhlYWRlciAvPlxuICAgICAgIFxuICAgICAgPC9IZWFkQ29udGFpbmVyPlxuXG4gICAgICB7Lyp2aWRlbyBpbWFnZSBlbiBkZSBib3ggb3AgZGUgZ2lmICovfVxuICAgICAgPFN0YXJ0SW1hZ2UvPlxuICAgICAgPEJveD5cbiAgICAgICAgPEJveENvbnRlbnQ+XG4gICAgICAgICAgPEJveFRpdGVsPkdhbWUgbGF0ZW4gb250d2lra2VsZW48L0JveFRpdGVsPlxuICAgICAgICAgIDxCb3hUZXh0PlxuICAgICAgICAgICAgV2lqIGJpaiBEdXRjaCBHYW1lIFN0dWRpbyB6aWpuIGdlc3BlY2lhbGlzZWVyZCBpbiBoZXQgb250d2lra2VsZW4gdmFuIGdhbWVzLlxuICAgICAgICAgICAgQmVraWprIGhpZXJvbmRlciBkZSBtb2dlbGlqa2hlZGVuLlxuICAgICAgICAgIDwvQm94VGV4dD5cbiAgICAgICAgICA8U2Nyb2xsQnV0dG9uIGhyZWY9XCIjc2Nyb2xsXCI+PC9TY3JvbGxCdXR0b24+XG4gICAgICAgIDwvQm94Q29udGVudD5cbiAgICAgIDwvQm94PlxuICAgICAgPEZsdWlkQ29udGFpbmVyIGlkPVwic2Nyb2xsXCI+XG4gICAgICAgIDxSb3c+XG4gICAgICAgIDxWckltYWdlIGNsYXNzTmFtZT1cImNvbC1tZC02IHB1c2gtbWQtNiBob21lX19jb250ZW50X2Jsb2NrIGhvbWVfX2Jsb2NrLXJpZ2h0IGhvbWVfX2Jsb2NrLWJnXCI+PC9WckltYWdlPlxuICAgICAgICA8VnJUZXh0Q29sb20gY2xhc3NOYW1lPVwiY29sLW1kLTYgcHVsbC1tZC02IGhvbWVfX2NvbnRlbnRfYmxvY2sgaG9tZV9fY29udGVudF9ibG9jay1jb250ZW50IGhvbWVfX2NvbnRlbnRfYmxvY2stY29udGVudC1yaWdodC1hbGlnblwiPlxuICAgICAgICAgIDxWclRpdGxlPlZSIHwgQVIgfCBTSU1VTEFUSUUgR0FNRTwvVnJUaXRsZT5cbiAgICAgICAgICA8VnJUZXh0PkJpaiBlZW4gVlIgZ2FtZSB3YWFuIGplIGplIGluIGVlbiBhbmRlcmUgdmlydHVlbGUgd2VyZWxkLiBFZW4gQVIgZ2FtZSBpcyBuaWV0IHZvbGxlZGlnIHZpcnR1ZWVsIG1hYXIgemlqbiBlciB2aXJ0dWVsZSBlbGVtZW50ZW4gZGllIGplIHRvZSBrYW4gdm9lZ2VuIGFhbiBkZSBiZXN0YWFuZGUgd2VyZWxkLjwvVnJUZXh0PlxuICAgICAgICAgIDxWclRleHQ+RG9vciBnZWJydWlrIHRlIG1ha2VuIHZhbiBlZW4gVmlydHVhbCBSZWFsaXR5IGJyaWwsIGxpamt0IGhldCBhbHNvZiBqZSBqZSBpbiBoZXQgc3BlbCBiZXZpbmR0LiBBdWdtZW50ZWQgUmVhbGl0eSBpcyB0ZSBnZWJydWlrZW4gZG9vcm1pZGRlbCB2YW4gYmlqdm9vcmJlZWxkIGplIHNtYXJ0cGhvbmUgb2YgZWVuIHNwZWNpYWxlIEFSLWJyaWwgem9hbHMgZGUgSG9sb2xlbnMuIERhYXJuYWFzdCBvbnR3aWtrZWxlbiB3aWogb29rIDNEIHNpbXVsYXRpZWdhbWVzLiBTaW11bGF0aWVnYW1lcyB3b3JkZW4gbWV0IG5hbWUgZ2VidWlrdCBvbSBwcmFrdGlqa3NpdHVhdGllcyB0ZSBvZWZlbmVuLCBiaWp2b29yYmVlbGQgaW4gZGUgbWVkaXNjaGUgd2VyZWxkIGVuIGJpaiBEZWZlbnNpZS48L1ZyVGV4dD5cbiAgICAgICAgICA8QnV0dG9uR3JvZW4+Q29udGFjdCBvcG5lbWVuPC9CdXR0b25Hcm9lbj5cbiAgICAgICAgICA8QnV0dG9uV2l0Pk9mZmVydGUgYWFudnJhZ2VuPC9CdXR0b25XaXQ+XG4gICAgICAgIDwvVnJUZXh0Q29sb20+XG4gICAgICAgIDwvUm93PlxuICAgICAgPC9GbHVpZENvbnRhaW5lcj5cblxuICAgICAgICB7LyogZW5nYWdlbWVudCBnYW1lKi99XG4gICAgICA8Rmx1aWRDb250YWluZXI+XG4gICAgICAgIDxSb3c+XG4gICAgICAgIDxFbmdhZ2VtZW50SW1hZ2UgY2xhc3NOYW1lPVwiY29sLW1kLTYgcHVzaC1tZC02IGhvbWVfX2NvbnRlbnRfYmxvY2sgaG9tZV9fYmxvY2stcmlnaHQgaG9tZV9fYmxvY2stYmdcIj48L0VuZ2FnZW1lbnRJbWFnZT5cbiAgICAgICAgPFZyVGV4dENvbG9tIGNsYXNzTmFtZT1cImNvbC1tZC02IHB1bGwtbWQtNiBob21lX19jb250ZW50X2Jsb2NrIGhvbWVfX2NvbnRlbnRfYmxvY2stY29udGVudCBob21lX19jb250ZW50X2Jsb2NrLWNvbnRlbnQtcmlnaHQtYWxpZ25cIj5cbiAgICAgICAgICA8VnJUaXRsZT5FTkdBR0VNRU5UIEdBTUU8L1ZyVGl0bGU+XG4gICAgICAgICAgPFZyVGV4dD5FZW4gZW5nYWdlbWVudCBnYW1lIGlzIGVyb3AgZ2VyaWNodCBvbSB1dyBtZXJrL3Byb2R1Y3Qgb25kZXIgZGUgYWFuZGFjaHQgdGUgYnJlbmdlbi48L1ZyVGV4dD5cbiAgICAgICAgICA8VnJUZXh0PlV3IGdlZWZ0IGhpZXJtZWUgdXcga2xhbnQgZGUgdWx0aWVtZSBNZXJrYmVsZXZpbmcuIExhYXQgZG9vciBtaWRkZWwgdmFuIGVlbiBnYW1lIGVlbiBibGlqdmVuZGUgaW5kcnVrIGFjaHRlciBiaWogdXcga2xhbnRlbiBlbiB6b3JnIGRhdCB6aWogdXcgbWVyayBuaWV0IG1lZXIgdmVyZ2V0ZW4uPC9WclRleHQ+XG4gICAgICAgICAgPEJ1dHRvbkdyb2VuPkNvbnRhY3Qgb3BuZW1lbjwvQnV0dG9uR3JvZW4+XG4gICAgICAgICAgPEJ1dHRvbldpdD5PZmZlcnRlIGFhbnZyYWdlbjwvQnV0dG9uV2l0PlxuICAgICAgICA8L1ZyVGV4dENvbG9tPlxuICAgICAgICA8L1Jvdz5cbiAgICAgIDwvRmx1aWRDb250YWluZXI+XG4gICAgICB7LyogZW50ZXJ0YWlubWVudCBnYW1lKi99XG4gICAgICA8Rmx1aWRDb250YWluZXI+XG4gICAgICAgIDxSb3c+XG4gICAgICAgIDxFbnRlcnRhaW5tZW50SW1hZ2UgY2xhc3NOYW1lPVwiY29sLW1kLTYgcHVzaC1tZC02IGhvbWVfX2NvbnRlbnRfYmxvY2sgaG9tZV9fYmxvY2stcmlnaHQgaG9tZV9fYmxvY2stYmdcIj48L0VudGVydGFpbm1lbnRJbWFnZT5cbiAgICAgICAgPFZyVGV4dENvbG9tIGNsYXNzTmFtZT1cImNvbC1tZC02IHB1bGwtbWQtNiBob21lX19jb250ZW50X2Jsb2NrIGhvbWVfX2NvbnRlbnRfYmxvY2stY29udGVudCBob21lX19jb250ZW50X2Jsb2NrLWNvbnRlbnQtcmlnaHQtYWxpZ25cIj5cbiAgICAgICAgICA8VnJUaXRsZT5FTlRFUlRBSU5NRU5UIEdBTUU8L1ZyVGl0bGU+XG4gICAgICAgICAgPFZyVGV4dD5FZW4gRW50ZXJ0YWlubWVudCBHYW1lIGhlZWZ0IGFscyBwcmltYWlyIHVpdGdhbmdzcHVudCBwbGV6aWVyL3NwZWxlbiAoRGVuayBhYW4gQ2FuZHkgQ3J1c2gsIEFuZ3J5IEJpcmRzIGV0Yy4pPC9WclRleHQ+XG4gICAgICAgICAgPFZyVGV4dD5FbnRlcnRhaW5tZW50IGdhbWVzIHppam4gdGUgc3BlbGVuIG9wIHZlcnNjaGlsbGVuZGUgcGxhdGZvcm1lbiB6b2FscyB2aWEgY29uc29sZXMsIElQaG9uZSwgSXBhZCBlbiBBbmRyb2lkLjwvVnJUZXh0PlxuICAgICAgICAgIDxCdXR0b25Hcm9lbj5Db250YWN0IG9wbmVtZW48L0J1dHRvbkdyb2VuPlxuICAgICAgICAgIDxCdXR0b25XaXQ+T2ZmZXJ0ZSBhYW52cmFnZW48L0J1dHRvbldpdD5cbiAgICAgICAgPC9WclRleHRDb2xvbT5cbiAgICAgICAgPC9Sb3c+XG4gICAgICA8L0ZsdWlkQ29udGFpbmVyPlxuICAgICAgICAgICAgey8qIHNlcmlvdXMgZ2FtZSovfVxuICAgICAgICAgICAgPEZsdWlkQ29udGFpbmVyPlxuICAgICAgICA8Um93PlxuICAgICAgICA8U2VyaW91c0ltYWdlIGNsYXNzTmFtZT1cImNvbC1tZC02IHB1c2gtbWQtNiBob21lX19jb250ZW50X2Jsb2NrIGhvbWVfX2Jsb2NrLXJpZ2h0IGhvbWVfX2Jsb2NrLWJnXCI+PC9TZXJpb3VzSW1hZ2U+XG4gICAgICAgIDxWclRleHRDb2xvbSBjbGFzc05hbWU9XCJjb2wtbWQtNiBwdWxsLW1kLTYgaG9tZV9fY29udGVudF9ibG9jayBob21lX19jb250ZW50X2Jsb2NrLWNvbnRlbnQgaG9tZV9fY29udGVudF9ibG9jay1jb250ZW50LXJpZ2h0LWFsaWduXCI+XG4gICAgICAgICAgPFZyVGl0bGU+U0VSSU9VUyB8IEFQUExJRUQgR0FNRTwvVnJUaXRsZT5cbiAgICAgICAgICA8VnJUZXh0PkVlbiBzZXJpb3VzIGdhbWUgb29rIHdlbCBFLWxlYXJuaW5nIGdhbWUgaXMgZWVuIHNwZWwgbWV0IGVlbiBhbmRlciBwcmltYWlyIGRvZWwgZGFuIHB1dXIgdmVybWFhay48L1ZyVGV4dD5cbiAgICAgICAgICA8VnJUZXh0PkFwcGxpZWQgZ2FtZXMgemlqbiBzdGVlZHMgbWVlciBpbiBvcGtvbXN0IGVuIHdvcmRlbiBkb29yIGJlZHJpanZlbiBlbiBpbnN0ZWxsaW5nZW4gZ2VicnVpa3Qgb20gdHJhaW5pbmdlbiBlbiBsZXJlbiBsZXVrZXIgdGUgbWFrZW4uPC9WclRleHQ+XG4gICAgICAgICAgPEJ1dHRvbkdyb2VuPkNvbnRhY3Qgb3BuZW1lbjwvQnV0dG9uR3JvZW4+XG4gICAgICAgICAgPEJ1dHRvbldpdD5PZmZlcnRlIGFhbnZyYWdlbjwvQnV0dG9uV2l0PlxuICAgICAgICA8L1ZyVGV4dENvbG9tPlxuICAgICAgICA8L1Jvdz5cbiAgICAgIDwvRmx1aWRDb250YWluZXI+XG5cbiAgICAgIHsvKmZvb3RlciAqL31cbiAgICAgIDxGb290ZXI+XG4gICAgICAgIDxJbnRlcmVzc2U+XG4gICAgICAgICAgPEludGVyZXNzZVRpdGVsPkludGVyZXNzZT88L0ludGVyZXNzZVRpdGVsPlxuICAgICAgICAgIDxJbnRlcmVzc2VUZXh0Pk5lZW0gY29udGFjdCBvcCB2b29yIGRlIG1vZ2VsaWpraGVkZW4uPC9JbnRlcmVzc2VUZXh0PlxuICAgICAgICAgIDxCdXR0b25Hcm9lbj5Db250YWN0IG9wbmVtZW48L0J1dHRvbkdyb2VuPlxuICAgICAgICA8L0ludGVyZXNzZT5cbiAgICAgIDwvRm9vdGVyPlxuICAgICAgXG5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoVGhlbWUpO1xuXG5jb25zdCBnbG9iYWxTdHlsZXMgPSBjc3NgXG4gIGJvZHkge1xuICAgIG1hcmdpbjogMDtcbiAgICBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSwgQmxpbmtNYWNTeXN0ZW1Gb250LCBcIlNlZ29lIFVJXCIsIFJvYm90byxcbiAgICAgIFwiRHJvaWQgU2Fuc1wiLCBcIkhlbHZldGljYSBOZXVlXCIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIH1cbiAgYSxcbiAgYTp2aXNpdGVkIHtcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIH1cbmA7XG5cbmNvbnN0IEhlYWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuXG5gO1xuXG5jb25zdCBCb3ggPSBzdHlsZWQuZGl2YFxucG9zaXRpb246IGFic29sdXRlO1xuYm90dG9tOiAwO1xuY29udGVudDogXCIgXCI7XG5sZWZ0OiAwO1xucmlnaHQ6IDA7XG56LWluZGV4OiAxO1xufVxuYDtcblxuY29uc3QgQm94Q29udGVudCA9IHN0eWxlZC5kaXZgXG5iYWNrZ3JvdW5kOiAjZmZmO1xuICAgIHBhZGRpbmc6IDI1cHg7XG4gICAgYm9yZGVyLXRvcDogNXB4IHNvbGlkICNmMWYxZjE7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIG1hcmdpbjogMCBhdXRvO1xuICAgIG1heC13aWR0aDogNjAwcHg7XG4gICAgYW5pbWF0aW9uOiBjYXJkIC41cztcbmA7XG5cbmNvbnN0IEJveFRpdGVsID0gc3R5bGVkLmgxYFxubGV0dGVyLXNwYWNpbmc6IC4xMmVtO1xuZm9udC1zaXplOiAyMHB4O1xuZm9udC13ZWlnaHQ6IDYwMDtcbnBhZGRpbmctYm90dG9tOiAxNXB4O1xuYDtcblxuY29uc3QgQm94VGV4dCA9IHN0eWxlZC5wYFxuICBjb2xvcjogIzBmMGUxMTtcbiAgbGluZS1oZWlnaHQ6IDJlbTtcbiAgZm9udC1zaXplOiAxNnB4O1xuYDtcblxuY29uc3QgU2Nyb2xsQnV0dG9uID0gc3R5bGVkLmFgXG50ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHBhZGRpbmc6IDcuNXB4O1xuICAgIGFuaW1hdGlvbjogc2NhbGluZyAxcyBpbmZpbml0ZSBhbHRlcm5hdGU7XG4gICAgLXdlYmtpdC1hbmltYXRpb246IHNjYWxpbmcgMXMgaW5maW5pdGUgYWx0ZXJuYXRlO1xuICAgIHRyYW5zaXRpb246IGFsbCAuMXMgZWFzZS1pbi1vdXQ7XG4gICAgbGluZS1oZWlnaHQ6IDA7XG4gICAgbWFyZ2luOiAwIGF1dG87XG4gICAgYmFja2dyb3VuZDogIzI3YWU2MDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuYDtcblxuY29uc3QgRmx1aWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBtYXgtd2lkdGg6IDEwMCU7XG5gO1xuXG5jb25zdCBSb3cgPSBzdHlsZWQuZGl2YFxuZGlzcGxheTogZmxleDtcbmZsZXgtd3JhcDogd3JhcDtcbm1hcmdpbi1yaWdodDogLTE1cHg7XG5tYXJnaW4tbGVmdDogLTE1cHg7XG5gO1xuXG5jb25zdCBTdGFydEltYWdlID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogdXJsKCR7c3RhcnRfaW1hZ2V9KTtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbiBjZW50ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbmA7XG5cbnsvKnZyKi99XG5cbmNvbnN0IFZySW1hZ2UgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kOiB1cmwoJHt2cl9pbWFnZX0pIG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xuYDtcblxuY29uc3QgVnJUZXh0Q29sb20gPSBzdHlsZWQuZGl2YFxucGFkZGluZzogMTAwcHggNTBweDtcbm1pbi1oZWlnaHQ6IDUwMHB4O1xuYmFja2dyb3VuZDogI2Y1ZjZmNjtcblxuYDtcblxuY29uc3QgVnJUZXh0ID0gc3R5bGVkLnBgXG5cbmNvbG9yOiAjMGYwZTExO1xubGluZS1oZWlnaHQ6IDEuNWVtO1xuZm9udC1zaXplOiAxN3B4O1xuYDtcblxuY29uc3QgVnJUaXRsZSA9IHN0eWxlZC5oMmBcbiAgXG5sZXR0ZXItc3BhY2luZzogLjEyZW07XG5mb250LXdlaWdodDogNjAwO1xudGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmNvbG9yOiAjMGYwZTExO1xucGFkZGluZy1ib3R0b206IDE1cHg7XG5gO1xuXG57LyplbmdhZ2VtZW50IGdhbWUgKi99XG5jb25zdCBFbmdhZ2VtZW50SW1hZ2UgPSBzdHlsZWQuZGl2YFxuYmFja2dyb3VuZDogdXJsKCR7ZW5nYWdlbWVudF9pbWFnZX0pIG5vLXJlcGVhdDtcbmJhY2tncm91bmQtc2l6ZTogY292ZXI7XG5iYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7XG5gO1xuXG57LyplbnRlcnRhaW5tZW50IGdhbWUgKi99XG5jb25zdCBFbnRlcnRhaW5tZW50SW1hZ2UgPSBzdHlsZWQuZGl2YFxuYmFja2dyb3VuZDogdXJsKCR7ZW5lcnRhaW5tZW50X2ltYWdlfSkgbm8tcmVwZWF0O1xuYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbmJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbmA7XG5cbnsvKnNlcmlvdXMgZ2FtZSAqL31cbmNvbnN0IFNlcmlvdXNJbWFnZSA9IHN0eWxlZC5kaXZgXG5iYWNrZ3JvdW5kOiB1cmwoJHtzZXJpb3VzX2ltYWdlfSkgbm8tcmVwZWF0O1xuYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcbmJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbmA7XG5cbmNvbnN0IEJ1dHRvbkdyb2VuID0gc3R5bGVkLmFgXG5ib3JkZXI6IDA7XG4gICAgYmFja2dyb3VuZDogIzI3YWU2MDtcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGxldHRlci1zcGFjaW5nOiAuMTJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgZm9udC1zaXplOiAxNHB4O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB0cmFuc2l0aW9uOiBhbGwgLjFzIGVhc2UtaW4tb3V0O1xuICAgIGNvbG9yOiAjRkZGRkZGO1xuICAgIG1hcmdpbjogMjBweCAwO1xuICAgIG1hcmdpbi1ib3R0b206IDVweDtcbmA7XG5cbmNvbnN0IEJ1dHRvbldpdCA9IHN0eWxlZC5hYFxuYm9yZGVyOiAwO1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgICBsZXR0ZXItc3BhY2luZzogLjEyZW07XG4gICAgYm9yZGVyLXJhZGl1czogM3B4O1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgdHJhbnNpdGlvbjogYWxsIC4xcyBlYXNlLWluLW91dDtcbiAgICBjb2xvcjogIzI1MjUyNTtcbiAgICBtYXJnaW46IDIwcHggMDtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG5gO1xuXG57Lypmb290ZXIgKi99XG5jb25zdCBGb290ZXIgPSBzdHlsZWQuZGl2YFxuICB3aWR0aDogMTAwJTtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3gtc2l6aW5nOiBpbmhlcml0O1xuYDtcblxuY29uc3QgSW50ZXJlc3NlID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogNTBweCAyNXB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogMjBweDtcbiAgZGlzcGxheTogYmxvY2s7XG5gO1xuXG5jb25zdCBJbnRlcmVzc2VUaXRlbCA9IHN0eWxlZC5oZWFkZXJgXG5sZXR0ZXItc3BhY2luZzogLjEyZW07XG5mb250LXNpemU6IDMycHg7XG5mb250LXdlaWdodDogNjAwO1xuY29sb3I6ICMwZjBlMTE7XG5wYWRkaW5nLWJvdHRvbTogMTVweDtcbmA7XG5cbmNvbnN0IEludGVyZXNzZVRleHQgPSBzdHlsZWQucGBcbmNvbG9yOiAjMGYwZTExO1xubGluZS1oZWlnaHQ6IDJlbTtcbmZvbnQtc2l6ZTogMjJweDtcbmA7XG5cbmNvbnN0IEludGVyZXNzZUlNRyA9IHN0eWxlZC5wYFxudmVydGljYWwtYWxpZ246IG1pZGRsZTtcbmJvcmRlci1zdHlsZTogbm9uZTtcbmA7XG5cblxuXG5jb25zdCBNYWluID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChcbiAgICAxODBkZWcsXG4gICAgcmdiYSg2NiwgMTc0LCAyMjgsIDAuMSksXG4gICAgcmdiYSg2NiwgMTc0LCAyMjgsIDApXG4gICk7XG5gO1xuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const InteresseTitel=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"header\",{target:\"e1nzqhd63\",label:\"InteresseTitel\"})( false?undefined:{name:\"ro44bp\",styles:\"letter-spacing:.12em;font-size:32px;font-weight:600;color:#0f0e11;padding-bottom:15px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const InteresseText=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"p\",{target:\"e1nzqhd62\",label:\"InteresseText\"})( false?undefined:{name:\"1v9zynd\",styles:\"color:#0f0e11;line-height:2em;font-size:22px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const InteresseIMG=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"p\",{target:\"e1nzqhd61\",label:\"InteresseIMG\"})( false?undefined:{name:\"qorkpe\",styles:\"vertical-align:middle;border-style:none\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Main=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\",{target:\"e1nzqhd60\",label:\"Main\"})( false?undefined:{name:\"1szd241\",styles:\"display:flex;justify-content:center;background-image:linear-gradient(\\n    180deg,\\n    rgba(66, 174, 228, 0.1),\\n    rgba(66, 174, 228, 0)\\n  )\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/index.js\n");

/***/ })

})